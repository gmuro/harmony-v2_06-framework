#
# A Perl script that converts a TI patch files into C code.
#
# Input: TI patch file from stdin
# Output: array of canned HCI command
#

use strict;

if (@ARGV == 0) {
	print "Usage: make_patch_script.pl <input file>\n";
	exit(0);
}

open IN, "<", $ARGV[0] or die $!;

my $scriptName = $ARGV[0];
$scriptName =~ s/\.txt$//;

open OUT, ">", $scriptName.".c" or die $!;

$scriptName =~ s/\./_/;

print OUT <<EOF;
/*******************************************************************************
* Contains proprietary and confidential information of SEARAN LLC.
* May not be used or disclosed to any other party except in accordance
* with a license from SEARAN LLC.
* Copyright (c) 2011-2015 SEARAN LLC. All Rights Reserved.
*******************************************************************************/

/******************************************************************************
* DO NOT MODIFY THIS FILE!
* This file was machine generated by the make_patch_script.pl script
*******************************************************************************/

#include "cdbt/bt/bt_std.h"
#include "cdbt/bt/bt_private.h"
#include "cdbt/extra/ti/ti.h"


EOF

my $hw_major = 0;
my $hw_minor = 0;
my $hwVersion = "N/A";
my $packetNo = 0;

my %commands = (
	'Send_HCI_VS_Start_VS_Lock'                          => [0xFE37, 2, 1, 1],
	'Send_HCI_VS_Goto_Address'                           => [0xFF83, 20, 4, 4, 4, 4, 4],
	'Send_HCI_VS_FE_Configuration'                       => [0xFDDC, 5, 1, 1, 1, 1, 1],
	'Send_HCI_VS_PLL_Enable'                             => [0xFD0F, 1, 1],
	'Send_HCI_VS_Fast_Clock_Configuration_btip'          => [0xFD1C, 19, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	'Send_HCI_VS_Config_Power_Mng_Params'                => [0xFD58, 31, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
	'Send_HCI_VS_Write_Hardware_Register'                => [0xFF01, 6, 4, 2],
	'Send_HCI_VS_DRPb_Set_Power_Vector'                  => [0xFD82, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
	'Send_HCI_VS_DRPb_Set_Class2_Single_Power'           => [0xFD87, 3, 1, 1, 1],
	'Send_HCI_VS_DRPb_Set_RF_Calibration_Info'           => [0xFD76, 46, 1, 4, 4,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	'Send_HCI_VS_DRPb_Enable_RF_Calibration'             => [0xFD80, 6, 1, 4, 1],
	'Send_HCI_VS_Stop_VS_Lock'                           => [0xFE38, 0],
	'Send_HCI_VS_Read_Modify_Write_Hardware_Register'    => [0xFD09, 8, 4, 2, 2],
	'Send_HCI_VS_LOAD_Cortex'                            => [0xFDA8, 1, 1],
	'Send_HCI_VS_LE_Enable'                              => [0xFD5B, 2, 1, 1],
	'Send_HCI_VS_BLE_Enable'                             => [0xFD5B, 2, 1, 1],
	'Send_HCI_VS_LE_Output_Power'                        => [0xFDDD, 1, 1],
	'Send_HCI_VS_LE_BLE_Output_Power'                    => [0xFDDD, 1, 1],
	'Send_HCI_VS_AVPR_Enable'                            => [0xFD92, 5, 1, 1, 1, 2],
	'Send_HCI_VS_Class_1p5_LDO_mode'                     => [0xFD6E, 2, 1, 1],
);

while (<IN>) {
	chomp;
	if (/^#/) {
		print OUT "//".substr($_, 1)."\n";
	}
	elsif (/^Send_HCI_VS_Write_Memory_Block/) {
		s/^Send_HCI_VS_Write_Memory_Block (.*)/$1/;
		my @tokens = split(',');
		$packetNo++;
		printf OUT "static const bt_byte packet%02d[] = {0x01,", $packetNo;

		my $tmp = hex(trim($tokens[0]));
		printf OUT "0x%02x,0x%02x,", $tmp & 0xFF, $tmp >> 8 & 0xFF;

		$tmp = int(trim($tokens[2])) + 5;
		printf OUT "0x%02x,", $tmp & 0xFF;

		$tmp = hex(trim($tokens[1]));
		printf OUT "0x%02x,0x%02x,0x%02x,0x%02x,", $tmp & 0xFF, $tmp >> 8 & 0xFF, $tmp >> 16 & 0xFF, $tmp >> 24 & 0xFF;

		$tmp = int(trim($tokens[2]));
		printf OUT "0x%02x,", $tmp & 0xFF;

		$tokens[3] =~ s/^\s+"//;
		$tokens[3] =~ s/"$//;
		$tmp = $tokens[3];

		my $byteCount = 9;
		for (my $i = 0; $i < length($tmp); $i += 2) {
			print OUT "0x".substr($tmp, $i, 2);
			if ($i == length($tmp) - 2) {
				print OUT "};";
			}
			else {
				print OUT ",";
			}

			if (++$byteCount == 16) {
				print OUT "\n                                   ";
				$byteCount = 0;
			}
		}

		print OUT "\n";
	}
	elsif (/^Send_HCI_VS/) {
		my @tokens = split(' ');
		my $cmdName = $tokens[0];
		my $cmdParamsRef = @commands{$cmdName};

		if ($cmdParamsRef) {
			$packetNo++;
			printf OUT "static const bt_byte packet%02d[] = {0x01,", $packetNo;

			my @cmdParams = @$cmdParamsRef;
			my $tmp = $cmdParams[0];
			printf OUT "0x%02x,0x%02x,", $tmp & 0xFF, $tmp >> 8 & 0xFF;
			printf OUT "0x%02x", $cmdParams[1];

			my @tokens = split(',');
			if ($#tokens != $#cmdParams - 1) {
				print "Invalid parameter list.";
				exit(1);
			}

			if ($cmdParams[1]) {
				print OUT ",";

				my $byteCount = 4;
				for (my $i = 2; $i <= $#cmdParams; $i++) {
					my $paramLen = $cmdParams[$i];
					my $paramValue = trim($tokens[$i - 1]);

					if ($paramValue =~ /^0\d+$/) {
						$paramValue = int($paramValue);
					}
					else {
						$paramValue = eval($paramValue);
					}

					if ($paramLen == 1) {
						printf OUT "0x%02x", $paramValue & 0xFF;
						$byteCount += 1;
					}
					elsif ($paramLen == 2) {
						printf OUT "0x%02x,0x%02x", $paramValue & 0xFF, $paramValue >> 8 & 0xFF;
						$byteCount += 2;
					}
					elsif ($paramLen == 4) {
						printf OUT "0x%02x,0x%02x,0x%02x,0x%02x", $paramValue & 0xFF, $paramValue >> 8 & 0xFF, $paramValue >> 16 & 0xFF, $paramValue >> 24 & 0xFF;
						$byteCount += 4;
					}

					if ($i == $#cmdParams) {
						print OUT "};";
					}
					else {
						print OUT ",";
					}

					if ($byteCount == 16) {
						print OUT "\n                                   ";
						$byteCount = 0;
					}
				}
			}
			else {
				print OUT "};";
			}

			if ($cmdName =~ /Send_HCI_VS_Start_VS_Lock/) {
				$hw_major = eval($tokens[1]);
				$hw_minor = eval($tokens[2]);
				$hwVersion = $hw_major."0".$hw_minor;
			}	

		}
		else {
			print "Unknown command. ".$cmdName;
			exit(1);
		}

		print OUT "\n";
	}
}
my $numPackets = $packetNo;

print OUT "\nstatic const bt_byte* const packets[] = {";
my $packetCount = 0;
for (my $i = 1; $i <= $numPackets; $i++)
{
	printf OUT "packet%02d", $i;
	if ($i != $numPackets) {
		print OUT ",";
	}

	if (++$packetCount == 15) {
		print OUT "\n                                         ";
		$packetCount = 0;
	}
}
print OUT "};\n\n";

print OUT "#define PACKET_COUNT (sizeof(packets) / sizeof(packets[0]))\n";

print OUT <<EOF;

static const btx_ti_script_t script =
{
	packets,
	PACKET_COUNT,
	$hw_major, $hw_minor         // compatible FW version $hwVersion
};

const btx_ti_script_t* btx_ti_get_script__$scriptName(void)
{
	return &script;
}
EOF


print OUT <<EOF;

//-------------------------------------------------------------------
// END OF GENERATED FILE
//-------------------------------------------------------------------
EOF

sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}
