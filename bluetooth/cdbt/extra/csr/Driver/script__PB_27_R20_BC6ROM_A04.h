//-------------------------------------------------------------------
// DO NOT MODIFY THIS FILE!
// This file was machine generated by the make_patch_script.pl script
//-------------------------------------------------------------------

#ifndef __BTX_CSR_PATCH_SCRIPT_INCLUDED__
#define __BTX_CSR_PATCH_SCRIPT_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

// =============================================================================
// 
// CSR tracking information, report this in case of problems:
//   $Revision: #20 $
//   Built Thu Sep 10 16:15:23 2009 GMT
//   Checked-in $DateTime: 2009/09/10 17:18:00 $
//   $File: //depot/bc/unified-23/dev/patches/4841/pb-27.psr $
// 
// Patch is for build 4841 sgl_4hci_rom_bt2.1_23_0710171402_sdio_encr128
// 
// Issues patched: B-22913, B-32173, B-34898, B-34960, B-39651, B-41910,
//                 B-42862, B-47332, B-49311, B-49312, B-57804, B-67742,
//                 B-8670
// 
// Documentation from pb-27.pb
// ---------------------------
// 
// General purpose patch bundle for BC6-ROM A04 (build ID 4841) that
// is suitable for all end users.
// 
// Documentation from edr-tx-temp-comp.pb
// --------------------------------------
// 
// Issues patched: B-32173
// 
// This patch modifies the EDR transmit temperature compensation to improve
// the differential error vector magnitude (DEVM) performance at temperatures
// below -20C.
// 
// Documentation from dutm-double-accepted.pb
// ------------------------------------------
// 
// Issues patched: B-22913
// 
// When a device is in Bluetooth Test Mode it doesn't use the normal
// mechanisms of baseband flow control and acknowledgement. This can cause
// a problem where the tester (master) sends LMP_test_control, to which the
// device under test (slave) normally responds with LMP_accepted. If the
// slave's message is lost there is no defined mechanism to send it again,
// so the whole test system can lock up.
// 
// By setting PSKEY_LM_TEST_SEND_ACCEPTED_TWICE to TRUE then the
// LMP_accepted messages are sent twice.
// 
// This is an ugly and imperfect fix, but it has improved interoperation
// with some Bluetooth testers.
// 
// Documentation from patch_hwakeup_evt_timeout.xap
// ------------------------------------------------
// 
// Issues patched: B-49311
// 
// State machine broken when using PSKEY_UART_HOST_WAKE.
// This patch addresses the problem.
// 
// Documentation from patch_transmit_prepare.xap
// ---------------------------------------------
// 
// Issues patched: B-49312
// 
// Erroneous timing of pause state when using PSKEY_UART_HOST_WAKE.
// This patch addresses the problem.
// 
// Documentation from patch_hal_set_synth_info_rx.xap
// --------------------------------------------------
// 
// Issues patched: B-34898
// 
// A problem has been identified with the BC6-ROM receive sensitivity.
// This patch addresses the problem.
// 
// Note that performance might also be improved by setting PSKEY_RX_HIGHSIDE to
// 1, but that's module design dependent. Consult CSR for advice.
// 
// Documentation from patch_hal_set_synth_info_tx.xap
// --------------------------------------------------
// 
// Issues patched: B-34898
// 
// A problem has been identified with the BC6-ROM receive sensitivity.
// This patch addresses the problem.
// 
// Documentation from tempcrop.xap
// -------------------------------
// 
// Issues patched: B-34960
// 
// Prevent (occasional) panics when operated at low temperatures.
// 
// Documentation from filtbias.xap
// -------------------------------
// 
// Issues patched: B-39651, B-42862
// 
// A problem has been identified in the firmware's temperature compensation
// algorithm which led to degraded EDR receiver performance at low
// temperatures. This patch resolves this issue.
// 
// Documentation from b_45283.xap
// ------------------------------
// 
// Issues patched: B-41910
// 
// Support for new RADIOTEST_CFG_FREQ_MS bccmd for Faster HQ BER reporting
// 
// Documentation from patch_lm_slave_fsm.c
// ---------------------------------------
// 
// Issues patched: B-47332
// 
// On BlueCore firmware which supports Secure Simple Pairing, a problem may
// occur on connection creation if the remote side tries to authenticate a
// BlueCore slave while the slave is in the middle of pairing. This happens if
// the link key is deleted on the slave's host but not the master's, so that
// the master attempts to authenticate while the slave is trying to establish a
// new link key. A characteristic symptom is that BlueCore rejects the master's
// LMP_au_rand twice, with LMP_not_accepted reason "Key Missing", and then with
// "LMP PDU Not Allowed". Once the problem has occurred, the LM responds to
// inbound LMP traffic with "LMP PDU Not Allowed", and the link is likely to
// time out.
// 
// Documentation from patch_lmp_detach.c
// -------------------------------------
// 
// Issues patched: B-8670
// 
// If BlueCore receives an LMP_detach PDU with a reason code of 0x8 (connection
// timeout) during connection creation, it silently drops the link without
// sending a connection complete event with a failure status to the host.
// 
// This was observed with another manufacturer's baseband, which sent such an
// LMP_detach during the link key negotiation for authentication and encryption
// on connection creation. CSR basebands do not send LMP_detach with this
// reason code as the spec does not allow it as an argument to HCI Disconnect
// (q.v. BT2.0+EDR, Part E, section 7.1.6).
// 
// The firmware has been amended to re-write invalid inbound LMP_detach reasons
// to Remote User Terminated Connection (0x13) and send the connection complete
// event.
// 
// Documentation from patch_hostio_sdio_start_timer.xap
// ----------------------------------------------------
// 
// Issues patched: B-57804
// 
// When using the SDIO or CSPI host transports BlueCore may become unstable.
// 
// Documentation from patch_lc_pause_all_data.xap
// ----------------------------------------------
// 
// Issues patched: B-67742
// 
// If BlueCore was performing a role switch as part of the connection creation
// procedure it paused all ACL user data on all links until the role switch
// completed. This could cause an interruption of 150 to 200 ms in the data
// flow. For some use cases, such as A2DP streaming, this could cause user
// observable effects (audio glitches in the A2DP case). Analysis of the
// firmware and LM sequencing for this scenario has revealed that this pause is
// not necessary and so it has been removed. There will still be some disruption
// of user data flow simply as the result of now having two links to service, at
// least one of which BlueCore is slave of. However, the duration should now be
// much reduced - to roughly the poll interval (25 ms by default).
// 
// Version information for input files
// -----------------------------------
// 
// Created by patchmaker.pl Revision: #39  Date: 2009/03/23 
// 
// Input file: pb-27.pb
// Depot file: //depot/bc/unified-23/dev/patches/4841/pb-27.pb
// File revision: 19
// 
// Input file: edr-tx-temp-comp.pb
// Depot file: //depot/bc/unified-23/dev/patches/4841/edr-tx-temp-comp.pb
// File revision: 1
// 
// Input file: dutm-double-accepted.pb
// Depot file: //depot/bc/unified-23/dev/patches/4841/dutm-double-accepted.pb
// File revision: 1
// 
// Input file: patch_hwakeup_evt_timeout.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_hwakeup_evt_timeout.xap
// File revision: 1
// 
// Input file: patches.inc
// Depot file: //depot/bc/unified-23/dev/patches/4841/patches.inc
// File revision: 1
// 
// Input file: patch_transmit_prepare.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_transmit_prepare.xap
// File revision: 1
// 
// Input file: patch_hal_set_synth_info_rx.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_hal_set_synth_info_rx.xap
// File revision: 6
// 
// Input file: patch_hal_set_synth_info_tx.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_hal_set_synth_info_tx.xap
// File revision: 4
// 
// Input file: tempcrop.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/tempcrop.xap
// File revision: 4
// 
// Input file: filtbias.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/filtbias.xap
// File revision: 46
// 
// Input file: b_45283.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/b_45283.xap
// File revision: 1
// 
// Input file: patch_lm_slave_fsm.c
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_lm_slave_fsm.c
// File revision: 1
// 
// Input file: patch_lmp_detach.c
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_lmp_detach.c
// File revision: 2
// 
// Input file: patch_hostio_sdio_start_timer.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_hostio_sdio_start_timer.xap
// File revision: 4
// 
// Input file: patch_lc_pause_all_data.xap
// Depot file: //depot/bc/unified-23/dev/patches/4841/patch_lc_pause_all_data.xap
// File revision: 3
// explicit, PSKEY_LM_TEST_SEND_ACCEPTED_TWICE (0x00f6, 246), 1 words
static const bt_byte packet1[] = {
    H(0x00f6, 1, 1), 
    W(0x0001), 

};

// explicit, PSKEY_PMALLOC_SIZES (0x0203, 515), 32 words
static const bt_byte packet2[] = {
    H(0x0203, 32, 2), 
    W(0x0002), W(0x0036), W(0x0004), W(0x0082), W(0x0006), W(0x0043), W(0x0008), W(0x004b), W(0x000a), W(0x002c), W(0x0010), W(0x000f), W(0x0014), W(0x0029), W(0x0020), W(0x0026), W(0x0024), W(0x000d), W(0x0028), W(0x000a), W(0x0034), W(0x0003), W(0x0046), W(0x000c), W(0x0064), W(0x000a), W(0x0074), W(0x000a), W(0x0082), W(0x0004), W(0x0000), W(0x0000), 

};

// explicit, PSKEY_MR_TX_IF_ATTEN_OFF_TEMP (0x0394, 916), 1 words
static const bt_byte packet3[] = {
    H(0x0394, 1, 3), 
    W(0xffec), 

};

// explicit, PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_PAYLOAD (0x03aa, 938), 12 words
static const bt_byte packet4[] = {
    H(0x03aa, 12, 4), 
    W(0xffd8), W(0x0003), W(0xffeb), W(0x0001), W(0xffec), W(0x0005), W(0xfff6), W(0x0005), W(0x0014), W(0x0000), W(0x0028), W(0xfffe), 

};

// explicit, PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_HEADER (0x03ab, 939), 12 words
static const bt_byte packet5[] = {
    H(0x03ab, 12, 5), 
    W(0xffd8), W(0x0003), W(0xffeb), W(0x0001), W(0xffec), W(0x0005), W(0xfff6), W(0x0005), W(0x0014), W(0x0000), W(0x0028), W(0xfffe), 

};

// explicit, PSKEY_RX_DYNAMIC_LVL_OFFSET (0x03d4, 980), 1 words
static const bt_byte packet6[] = {
    H(0x03d4, 1, 6), 
    W(0x0007), 

};

// patch_hardware_0, PSKEY_PATCH50 (0x212c, 8492), 20 words
static const bt_byte packet7[] = {
    H(0x212c, 20, 7), 
    W(0x0001), W(0xbb38), W(0x3d14), W(0xe335), W(0x03e8), W(0x0014), W(0x06e0), W(0x0100), W(0x1d84), W(0x03fc), W(0x0100), W(0x1c14), W(0xfa25), W(0x0018), W(0xff2b), W(0xff0e), W(0xbb00), W(0x3b18), W(0x00e2), W(0xfdb9), 

};

// patch_hardware_2, PSKEY_PATCH52 (0x212e, 8494), 34 words
static const bt_byte packet8[] = {
    H(0x212e, 34, 8), 
    W(0x0001), W(0xa276), W(0xff00), W(0x7e25), W(0xff00), W(0xc815), W(0x8fc4), W(0x40b4), W(0xff00), W(0xc825), W(0x8915), W(0x9000), W(0xffc4), W(0x3000), W(0x00b4), W(0x8925), W(0xe400), W(0x6c15), W(0x9000), W(0xffc4), W(0x3000), W(0x00b4), W(0xe400), W(0x6c25), W(0xe400), W(0x6d15), W(0x9000), W(0xffc4), W(0x3000), W(0x00b4), W(0xe400), W(0x6d25), W(0xffe3), W(0xfed6), 

};

// patch_hardware_3, PSKEY_PATCH53 (0x212f, 8495), 46 words
static const bt_byte packet9[] = {
    H(0x212f, 46, 9), 
    W(0x0001), W(0xa32d), W(0xff00), W(0x7e25), W(0x0216), W(0xe400), W(0x6c18), W(0xff00), W(0xc811), W(0x8fc0), W(0x1e84), W(0x15f4), W(0x3e84), W(0x13f4), W(0x40b0), W(0xff00), W(0xc821), W(0x9000), W(0xff14), W(0x8911), W(0xe1c1), W(0x3000), W(0x00b0), W(0x8921), W(0x0012), W(0xe1c1), W(0x3000), W(0x00b0), W(0x01c6), W(0x3000), W(0x00b4), W(0x0be0), W(0x7000), W(0x0014), W(0xff00), W(0xc821), W(0x8911), W(0xe1b1), W(0x8921), W(0x0012), W(0xe1b1), W(0x01b6), W(0x0022), W(0x0126), W(0xffe3), W(0xa6bb), 

};

// patch_hardware_4, PSKEY_PATCH54 (0x2130, 8496), 15 words
static const bt_byte packet10[] = {
    H(0x2130, 15, 10), 
    W(0x0001), W(0xf897), W(0x0014), W(0x001b), W(0x0226), W(0x001b), W(0x0712), W(0x0816), W(0x0018), W(0xff2b), W(0xff0e), W(0xf900), W(0x9a18), W(0x00e2), W(0x76a4), 

};

// patch_hardware_5, PSKEY_PATCH55 (0x2131, 8497), 21 words
static const bt_byte packet11[] = {
    H(0x2131, 21, 11), 
    W(0x0001), W(0xe897), W(0xe000), W(0xb515), W(0x0284), W(0x09f4), W(0x0384), W(0x07f4), W(0x0018), W(0xff2b), W(0xff0e), W(0xe900), W(0x9b18), W(0x00e2), W(0x0018), W(0xff2b), W(0xff0e), W(0xe900), W(0xd618), W(0x00e2), W(0x3bed), 

};

// patch_hardware_7, PSKEY_PATCH57 (0x2133, 8499), 39 words
static const bt_byte packet12[] = {
    H(0x2133, 39, 12), 
    W(0x0001), W(0xc904), W(0x0018), W(0x132b), W(0x130e), W(0x3d00), W(0x219e), W(0xe900), W(0x3518), W(0x0026), W(0xe400), W(0x6d15), W(0xff26), W(0x6014), W(0x0126), W(0xe415), W(0x130e), W(0xdd00), W(0xc09e), W(0x019c), W(0xe200), W(0x2819), W(0xff00), W(0x7000), W(0x009e), W(0x8915), W(0xe400), W(0x6d25), W(0xff00), W(0xc515), W(0xe500), W(0xe725), W(0xe415), W(0x130e), W(0xc700), W(0xc518), W(0x009e), W(0xd80f), W(0x1f0b), 

};

// patch_hardware_8, PSKEY_PATCH58 (0x2134, 8500), 40 words
static const bt_byte packet13[] = {
    H(0x2134, 40, 13), 
    W(0x0001), W(0xc9cb), W(0x2600), W(0xce88), W(0x06f0), W(0xb511), W(0x0473), W(0x0200), W(0xf380), W(0x05e6), W(0xe30b), W(0xdf00), W(0xf315), W(0x8000), W(0x0184), W(0x17f4), W(0xe900), W(0x3518), W(0x0012), W(0x8000), W(0x0180), W(0x03f0), W(0x0026), W(0x0fe0), W(0x0056), W(0x1627), W(0x0192), W(0xe111), W(0x07a4), W(0xe800), W(0x8031), W(0x1523), W(0x019c), W(0xe200), W(0x2619), W(0xff00), W(0x7000), W(0x00e2), W(0xe30f), W(0xbbff), 

};

// patch_hardware_9, PSKEY_PATCH59 (0x2135, 8501), 24 words
static const bt_byte packet14[] = {
    H(0x2135, 24, 14), 
    W(0x0001), W(0xc8bf), W(0xfd84), W(0x0ef8), W(0x0387), W(0x06f8), W(0x0327), W(0x8915), W(0x1000), W(0xffc4), W(0x0227), W(0x0018), W(0xff2b), W(0xff0e), W(0xc900), W(0xc718), W(0x00e2), W(0x0018), W(0xff2b), W(0xff0e), W(0xc900), W(0xe518), W(0x00e2), W(0x58ac), 

};

// patch_hardware_10, PSKEY_PATCH60 (0x2136, 8502), 31 words
static const bt_byte packet15[] = {
    H(0x2136, 31, 15), 
    W(0x0002), W(0x2552), W(0xf921), W(0x0084), W(0x13f4), W(0xe119), W(0x0316), W(0x0012), W(0x3280), W(0x05f4), W(0x1680), W(0x0df0), W(0x0400), W(0xe890), W(0x0027), W(0x0116), W(0x0212), W(0x0018), W(0xff2b), W(0xff0e), W(0xe400), W(0x8b18), W(0x009e), W(0xf70f), W(0x0118), W(0xff2b), W(0xff0e), W(0x2500), W(0x5618), W(0x00e2), W(0xced3), 

};

// patch_hardware_11, PSKEY_PATCH61 (0x2137, 8503), 29 words
static const bt_byte packet16[] = {
    H(0x2137, 29, 16), 
    W(0x0001), W(0xe06e), W(0xe100), W(0xa988), W(0x0df4), W(0xe800), W(0x9f19), W(0x071a), W(0x0416), W(0x0009), W(0x0400), W(0xe890), W(0x0023), W(0x0127), W(0xe800), W(0x9f19), W(0x021a), W(0x0013), W(0x0117), W(0x0a36), W(0x0942), W(0x0922), W(0x0a26), W(0xf955), W(0xf861), W(0x0080), W(0xf7ec), W(0xfc0f), W(0x82c1), 

};

// patch_hardware_12, PSKEY_PATCH62 (0x2138, 8504), 13 words
static const bt_byte packet17[] = {
    H(0x2138, 13, 17), 
    W(0x0001), W(0xe303), W(0x0416), W(0x0009), W(0x0400), W(0xe890), W(0x0018), W(0xff2b), W(0xff0e), W(0xe300), W(0x1418), W(0x00e2), W(0x4929), 

};

// patch_hardware_13, PSKEY_PATCH63 (0x2139, 8505), 43 words
static const bt_byte packet18[] = {
    H(0x2139, 43, 18), 
    W(0x0001), W(0xcb38), W(0xf90b), W(0xe000), W(0x8015), W(0x0009), W(0x0400), W(0xe890), W(0x0118), W(0x002b), W(0x1f18), W(0x012b), W(0x0018), W(0xff2b), W(0xff0e), W(0x0700), W(0xf818), W(0x009e), W(0x17f0), W(0x0010), W(0xcb00), W(0x5514), W(0x0023), W(0x0127), W(0x0018), W(0x022b), W(0x0114), W(0x0327), W(0x1f18), W(0x042b), W(0xe000), W(0x8015), W(0x0009), W(0x0400), W(0xe890), W(0x0018), W(0xff2b), W(0xff0e), W(0x0700), W(0x0518), W(0x009e), W(0xf90f), W(0x2ec6), 

};

// patch_hardware_14, PSKEY_PATCH64 (0x213a, 8506), 4 words
static const bt_byte packet19[] = {
    H(0x213a, 4, 19), 
    W(0x0003), W(0xba37), W(0x00e2), W(0x580d), 

};

// explicit, PSKEY_TEMPERATURE_VS_DELTA_INTERNAL_PA_MR (0x21e1, 8673), 16 words
static const bt_byte packet20[] = {
    H(0x21e1, 16, 20), 
    W(0xffd8), W(0x0002), W(0xffeb), W(0x0001), W(0xffec), W(0xffff), W(0xfff6), W(0x0000), W(0x0032), W(0x0000), W(0x003c), W(0x0001), W(0x0050), W(0x0002), W(0x0064), W(0x0003), 

};

// patch_fsm_32bit_run, PSKEY_PATCH133 (0x2215, 8725), 18 words
static const bt_byte packet21[] = {
    H(0x2215, 18, 21), 
    W(0xfe0b), W(0x0217), W(0x031b), W(0x2d00), W(0xff84), W(0x0bf0), W(0x0016), W(0x0e84), W(0x08f0), W(0x0617), W(0x0100), W(0x0f84), W(0x04f0), W(0x0100), W(0xdc14), W(0x0627), W(0xfe0f), W(0xc35e), 

};

// patch_sched_put_allocated_message, PSKEY_PATCH134 (0x2216, 8726), 28 words
static const bt_byte packet22[] = {
    H(0x2216, 28, 22), 
    W(0xfe0b), W(0x021b), W(0x0317), W(0x0484), W(0x16f0), W(0x049b), W(0x14f0), W(0x0116), W(0x0184), W(0x11f0), W(0x021a), W(0x0016), W(0x0784), W(0x0df0), W(0x0212), W(0xe015), W(0xfec4), W(0x0800), W(0x0e84), W(0x07f0), W(0xe015), W(0x0100), W(0xffc4), W(0x1300), W(0x00b4), W(0x0226), W(0xfe0f), W(0xbae4), 

};

// patch_spare1, PSKEY_PATCH151 (0x2227, 8743), 63 words
static const bt_byte packet23[] = {
    H(0x2227, 63, 23), 
    W(0x299c), W(0x0013), W(0x279c), W(0x0427), W(0x0f00), W(0x3314), W(0x289c), W(0x0527), W(0x0314), W(0x249c), W(0x0627), W(0x2000), W(0x6914), W(0x219c), W(0x0587), W(0x0224), W(0x0527), W(0x0514), W(0x1b9c), W(0x0487), W(0x0224), W(0x0417), W(0x0677), W(0x0200), W(0x9084), W(0x0828), W(0x0517), W(0x0677), W(0x0287), W(0x0424), W(0x0227), W(0x0013), W(0x0323), W(0x0013), W(0x0a33), W(0x0183), W(0xde2c), W(0x0313), W(0xff00), W(0xc521), W(0xf60f), W(0x0023), W(0xff00), W(0xc521), W(0x0114), W(0x0ba0), W(0xfc0b), W(0x0325), W(0x0014), W(0x0f13), W(0x0127), W(0x0023), W(0x0b0e), W(0xc700), W(0x5f18), W(0x009e), W(0x0137), W(0x0013), W(0xff30), W(0xf7f0), W(0x0f97), W(0xfc0f), W(0xc70e), 

};

// patch_spare2, PSKEY_PATCH152 (0x2228, 8744), 62 words
static const bt_byte packet24[] = {
    H(0x2228, 62, 24), 
    W(0x1613), W(0x1030), W(0x2080), W(0x362c), W(0x0010), W(0x1a23), W(0xe415), W(0x0234), W(0x1a0e), W(0xc600), W(0xf518), W(0x009e), W(0x1513), W(0xe230), W(0xe900), W(0x3715), W(0x1e34), W(0x0027), W(0xe035), W(0x0118), W(0x012b), W(0x019c), W(0xe200), W(0x2719), W(0xff00), W(0x7000), W(0x009e), W(0xf814), W(0x1583), W(0x022c), W(0x0814), W(0x169b), W(0x02e8), W(0x0074), W(0xe900), W(0x3635), W(0x7f84), W(0x0328), W(0x0100), W(0x8014), W(0x3f84), W(0x0220), W(0x4014), W(0xe900), W(0x3625), W(0x1693), W(0xe111), W(0x07a4), W(0xe800), W(0x8031), W(0x1523), W(0xe415), W(0x0234), W(0x1a0e), W(0xc700), W(0xc518), W(0x009e), W(0x1517), W(0xe500), W(0xe725), W(0xe30f), W(0x6a40), 

};

// patch_spare3, PSKEY_PATCH153 (0x2229, 8745), 29 words
static const bt_byte packet25[] = {
    H(0x2229, 29, 25), 
    W(0xf60b), W(0x0127), W(0x8000), W(0xff14), W(0x0227), W(0x0014), W(0x0327), W(0x0727), W(0x5000), W(0x0714), W(0xff00), W(0x7b25), W(0xff00), W(0xcf15), W(0xc000), W(0x0fc4), W(0xe400), W(0x76b5), W(0xff00), W(0xcf25), W(0xe900), W(0x3415), W(0x8925), W(0xe200), W(0x2519), W(0xff00), W(0x7000), W(0x00e2), W(0xdb92), 

};

// patch_spare4, PSKEY_PATCH154 (0x222a, 8746), 58 words
static const bt_byte packet26[] = {
    H(0x222a, 58, 26), 
    W(0xf10b), W(0x0100), W(0x6d10), W(0x0200), W(0x3514), W(0x2a9c), W(0xe800), W(0x8021), W(0x0a23), W(0xe230), W(0x249c), W(0x0b27), W(0x0a13), W(0x219c), W(0x0a13), W(0x0b87), W(0x0620), W(0x0230), W(0x0a23), W(0x0200), W(0x5780), W(0xf72c), W(0xe800), W(0x8051), W(0xe900), W(0x3721), W(0xe415), W(0x0010), W(0x0c23), W(0x220e), W(0xc900), W(0x8618), W(0x009e), W(0xfd14), W(0xf825), W(0x019c), W(0xe200), W(0x2919), W(0xe500), W(0xdb11), W(0x1000), W(0x00c0), W(0xff00), W(0x7000), W(0x00f6), W(0xf10f), W(0xe015), W(0xf60b), W(0x0218), W(0x0a2b), W(0x0818), W(0x0b2b), W(0xe200), W(0x2719), W(0xff00), W(0x7000), W(0x01e2), W(0x9c36), 

};

// patch_spare5, PSKEY_PATCH155 (0x222b, 8747), 26 words
static const bt_byte packet27[] = {
    H(0x222b, 26, 27), 
    W(0xe419), W(0xe415), W(0x0a34), W(0xfa25), W(0x0116), W(0x0012), W(0x04e8), W(0xf881), W(0x06fc), W(0x0ce0), W(0xf899), W(0x03ec), W(0x0c87), W(0x082c), W(0x0c27), W(0x8915), W(0xf000), W(0x00c4), W(0x0cb7), W(0x8925), W(0xf821), W(0x0238), W(0xfa89), W(0xedfc), W(0xf10f), W(0x338f), 

};

static const bt_byte* const packets[] = {
    packet1,
    packet2,
    packet3,
    packet4,
    packet5,
    packet6,
    packet7,
    packet8,
    packet9,
    packet10,
    packet11,
    packet12,
    packet13,
    packet14,
    packet15,
    packet16,
    packet17,
    packet18,
    packet19,
    packet20,
    packet21,
    packet22,
    packet23,
    packet24,
    packet25,
    packet26,
    packet27
};

#define PACKET_COUNT 27

#ifdef __cplusplus
}
#endif

#endif // __BTX_CSR_PATCH_SCRIPT_INCLUDED__

//-------------------------------------------------------------------
// END OF GENERATED FILE
//-------------------------------------------------------------------
