//-------------------------------------------------------------------
// DO NOT MODIFY THIS FILE!
// This file was machine generated by the make_patch_script.pl script
//-------------------------------------------------------------------

#ifndef __BTX_CSR_PATCH_SCRIPT_INCLUDED__
#define __BTX_CSR_PATCH_SCRIPT_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

// =============================================================================
// 
// CSR tracking information, report this in case of problems:
//   $Revision: #16 $
//   Built Wed Jan  8 17:19:14 2014 GMT
//   Checked-in $DateTime: 2014/01/08 17:30:56 $
//   $File: //depot/bc/gemini-a08/dev/patches/8241/pb-109.psr $
// 
// Patch is for build 8241 gem_5hci_rom_bt4.0_gemA08_1106290711_dspm_encr128
// 
// Issues patched: RMA-50, B-79226, B-104898, B-105729, B-106483, B-108091,
//                 B-108660, B-111318, B-112673, B-121084, B-126600,
//                 B-136251
// 
// Documentation from pb-109.pb
// ----------------------------
// 
// General purpose patch and PSKEY bundle for CSR8811 and CSR8311 A08.
// 
// Documentation from pb-109-common.pb
// -----------------------------------
// 
// General patch bundle for Gemini-A08 (build ID 8241)
// Patches and keys in here should be common to all
// package variants.
// 
// Documentation from bt_pskeys.pb
// -------------------------------
// 
// Issues patched: B-112673
// 
// Non-default PSKEY settings aimed at improving Bluetooth performance.
// These are recommended for all users of this device regardless of
// package or application.
// 
// Note that some of these settings may depend on the presence of other
// PSKEYs and/or patches.
// 
// Documentation from rt_zero.xap
// ------------------------------
// 
// Issues patched: B-106483
// 
// Issuing the TX DATA radiotest functions inadvertently caused
// the BLE power table configuration to be used instead of BR/EDR
// 
// Documentation from race_condition_stop_adv.xap
// ----------------------------------------------
// 
// Issues patched: B-105729
// 
// When BlueCore is performing Bluetooth low energy advertising whilst
// performing some other activity simultaneously like being slave of a
// BR/EDR link, it is possible that BlueCore might become unresponsive
// when the host disables advertising or when connectable-directed
// advertising times out in case BlueCore was performing
// connectable-directed advertising.
// 
// Documentation from data_unpause.xap
// -----------------------------------
// 
// Issues patched: B-108091, B-108660
// 
// Where encryption was refreshed, a Bluecore LE slave could sometimes
// transmit data too soon. This could lead to the master of the link
// disconnecting with a mic error.
// 
// Documentation from rebuffer_commands.xap
// ----------------------------------------
// 
// Issues patched: B-104898
// 
// When BlueCore receives an HCI command that it can't process immediately
// because it is busy doing some other operation on the link the command
// was destined for, BlueCore would try to buffer the command but due to a
// fault in BlueCore firmware, BlueCore could try to process this buffered
// command too soon i.e. before the ongoing operation has finished. In this
// case BlueCore would try buffering the command again and could fail to do
// so and reject the command with reason "command disallowed"
// 
// Documentation from patch_reset_auto_enc_refresh_tmr.xap
// -------------------------------------------------------
// 
// Issues patched: B-121084
// 
// BlueCore does not clear some state associated with encryption 
// refresh on a HCI reset. Consequently a fast cycle of connections 
// with encryption and HCI resets can cause BlueCore to become unresponsive.
// 
// Documentation from patch_radiotest_tx_start.c
// ---------------------------------------------
// 
// Issues patched: RMA-50
// 
// On some CSR8xxx devices the chip isn’t always successful in acquiring 
// a lock to the specified frequency when in radiotest mode and running 
// the transmit test. When this issue occurs it is not possible to perform 
// a crystal trim. This issue is only affecting chips in Radiotest mode 
// executing the TX test(TXSTART)
// 
// Documentation from ssp_ra_ret.xap
// ---------------------------------
// 
// Issues patched: B-136251
// 
// With secure simple pairing enabled on a BlueCore device acting as responder 
// during pairing, the device can become unresponsive to HCI commands if the 
// initiator retries the pairing procedure after a failed numeric comparison.
// 
// Documentation from patch_ble_connection_crc.xap
// -----------------------------------------------
// 
// Patch for B-114030
// In the process of establishing a Bluetooth low energy connection as either 
// master or slave of the connection, BlueCore does not consider the connection
// as being in the established state until receives a packet with a valid CRC 
// (whereas it should consider the connection as established even on receiving
// a packet with invalid CRC).
// 
// Documentation from shunt_h4_h4ds.xap
// ------------------------------------
// 
// Issues patched: B-79226
// 
// In Bluecore firmware, On Chip SBC encoding support was not added for H4
// and H4DS host transports
// 
// Documentation from patch_avoid_spurious_emissions.c
// ---------------------------------------------------
// 
// Issues patched: B-111318
// 
// In certain BC7's a small peak in Tx output power might be seen at the
// start of the Tx ramp profile. Although this peak is too small to cause
// any spurious emissions it has led to one model of tester seeing the Tx
// output peak as the start of the Tx packet, which resulted in the tester
// being unable to measure the Tx packet correctly.
// 
// Documentation from patch_rx_medium_rate_stats.xap
// -------------------------------------------------
// 
// Issues patched: B-126600
// 
// BlueCore implements the Bluetooth spec feature Channel Quality Driven Data
// Rate (CQDDR). This allows a device that's receiving data to tell the device
// sending data whether higher bandwidth (less robust) packets or more robust
// (lower bandwidth) packets are preferred. This is done by measuring the error
// rate on received packets.
// 
// Tests have shown that when receiving data on an EDR link, BlueCore is
// reluctant to signal that it would prefer 2 Mbps packets over 3 Mbps packets.
// This reluctance can mean that the link can sometimes operate in a regime
// where the packet loss rate (PLR) is unacceptably high.
// 
// Version information for input files
// -----------------------------------
// 
// Created by patchmaker.pl Revision: #56  Date: 2013/12/05 
// 
// Input file: pb-109.pb
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/pb-109.pb
// File revision: 1
// 
// Input file: pb-109-common.pb
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/pb-109-common.pb
// File revision: 15
// 
// Input file: bt_pskeys.pb
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/bt_pskeys.pb
// File revision: 3
// 
// Input file: rt_zero.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/rt_zero.xap
// File revision: 3
// 
// Input file: ../patch_utils.inc
// Depot file: //depot/bc/gemini-a08/dev/patches/patch_utils.inc
// File revision: 1
// 
// Input file: race_condition_stop_adv.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/race_condition_stop_adv.xap
// File revision: 3
// 
// Input file: data_unpause.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/data_unpause.xap
// File revision: 7
// 
// Input file: rebuffer_commands.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/rebuffer_commands.xap
// File revision: 3
// 
// Input file: patch_reset_auto_enc_refresh_tmr.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/patch_reset_auto_enc_refresh_tmr.xap
// File revision: 3
// 
// Input file: patch_radiotest_tx_start.c
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/patch_radiotest_tx_start.c
// File revision: 1
// 
// Input file: ssp_ra_ret.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/ssp_ra_ret.xap
// File revision: 1
// 
// Input file: patch_ble_connection_crc.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/patch_ble_connection_crc.xap
// File revision: 2
// 
// Input file: shunt_h4_h4ds.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/shunt_h4_h4ds.xap
// File revision: 6
// 
// Input file: patch_avoid_spurious_emissions.c
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/patch_avoid_spurious_emissions.c
// File revision: 3
// 
// Input file: patch_rx_medium_rate_stats.xap
// Depot file: //depot/bc/gemini-a08/dev/patches/8241/patch_rx_medium_rate_stats.xap
// File revision: 1
// explicit, PSKEY_RX_MR_SAMP_CONFIG (0x003c, 60), 1 words
static const bt_byte packet1[] = {
    H(0x003c, 1, 1), 
    W(0x0426), 

};

// patch_hardware_0, PSKEY_PATCH50 (0x212c, 8492), 16 words
static const bt_byte packet2[] = {
    H(0x212c, 16, 2), 
    W(0x0000), W(0xc47d), W(0x5714), W(0x0018), W(0xff2b), W(0xff0e), W(0xd800), W(0x7918), W(0x009e), W(0x0018), W(0xff2b), W(0xff0e), W(0xc500), W(0x8018), W(0x00e2), W(0x7080), 

};

// patch_hardware_1, PSKEY_PATCH51 (0x212d, 8493), 25 words
static const bt_byte packet3[] = {
    H(0x212d, 25, 3), 
    W(0x0002), W(0x5b79), W(0x0014), W(0xe700), W(0x9525), W(0x011b), W(0x0626), W(0x089a), W(0x0af4), W(0x0218), W(0xff2b), W(0xff0e), W(0x5b00), W(0x4318), W(0x009e), W(0x0014), W(0x011b), W(0x0826), W(0x0218), W(0xff2b), W(0xff0e), W(0x5c00), W(0x8218), W(0x00e2), W(0xa63a), 

};

// patch_hardware_2, PSKEY_PATCH52 (0x212e, 8494), 38 words
static const bt_byte packet4[] = {
    H(0x212e, 38, 4), 
    W(0x0002), W(0xd0a7), W(0x0316), W(0x0318), W(0xff2b), W(0xff0e), W(0x2300), W(0x0618), W(0x009e), W(0xe199), W(0x14f4), W(0xe119), W(0x0812), W(0x8000), W(0x00c0), W(0x10f0), W(0x061b), W(0x0212), W(0x0100), W(0xffc0), W(0x0780), W(0x0af0), W(0x0316), W(0x0010), W(0x0318), W(0xff2b), W(0xff0e), W(0x3800), W(0x1318), W(0x009e), W(0xf70f), W(0x0218), W(0xff2b), W(0xff0e), W(0xd100), W(0xac18), W(0x00e2), W(0xcf53), 

};

// patch_hardware_3, PSKEY_PATCH53 (0x212f, 8495), 26 words
static const bt_byte packet5[] = {
    H(0x212f, 26, 5), 
    W(0x0003), W(0xc916), W(0x0114), W(0x0027), W(0x0517), W(0x2b00), W(0xa484), W(0x06f0), W(0x2b00), W(0xa914), W(0x0527), W(0x0114), W(0x02e0), W(0x0014), W(0x0127), W(0x0014), W(0x0227), W(0x0323), W(0xe315), W(0x0318), W(0xff2b), W(0xff0e), W(0xc900), W(0x1d18), W(0x00e2), W(0xcb5f), 

};

// patch_hardware_4, PSKEY_PATCH54 (0x2130, 8496), 24 words
static const bt_byte packet6[] = {
    H(0x2130, 24, 6), 
    W(0x0002), W(0xca7a), W(0x0018), W(0xff2b), W(0xff0e), W(0x8400), W(0xcb18), W(0x009e), W(0xea00), W(0x5f11), W(0x0100), W(0x0080), W(0x0524), W(0x0100), W(0x00b0), W(0xea00), W(0x5f21), W(0x0218), W(0xff2b), W(0xff0e), W(0xca00), W(0x7d18), W(0x00e2), W(0x2513), 

};

// patch_hardware_5, PSKEY_PATCH55 (0x2131, 8497), 25 words
static const bt_byte packet7[] = {
    H(0x2131, 25, 7), 
    W(0x0003), W(0xfe75), W(0xeb00), W(0xc114), W(0x0218), W(0xff2b), W(0xff0e), W(0x6700), W(0xe718), W(0x009e), W(0xea00), W(0x6714), W(0x0218), W(0xff2b), W(0xff0e), W(0x6700), W(0xe718), W(0x009e), W(0x0318), W(0xff2b), W(0xff0e), W(0xfe00), W(0x7a18), W(0x00e2), W(0x0c6f), 

};

// patch_hardware_8, PSKEY_PATCH58 (0x2134, 8500), 19 words
static const bt_byte packet8[] = {
    H(0x2134, 19, 8), 
    W(0x0001), W(0x1a6f), W(0x051b), W(0x0116), W(0x0284), W(0x03f0), W(0x0310), W(0x0122), W(0x0110), W(0x071b), W(0x0100), W(0x8922), W(0x0118), W(0xff2b), W(0xff0e), W(0x1a00), W(0x7318), W(0x00e2), W(0xd58c), 

};

// patch_hardware_9, PSKEY_PATCH59 (0x2135, 8501), 22 words
static const bt_byte packet9[] = {
    H(0x2135, 22, 9), 
    W(0x0001), W(0x14d1), W(0xff40), W(0x0627), W(0x0523), W(0x091b), W(0x0116), W(0x0284), W(0x07f0), W(0x0310), W(0x0122), W(0x5f16), W(0x4800), W(0x00b4), W(0x5f26), W(0x0118), W(0xff2b), W(0xff0e), W(0x1500), W(0xd418), W(0x00e2), W(0xf7fe), 

};

// patch_hardware_10, PSKEY_PATCH60 (0x2136, 8502), 20 words
static const bt_byte packet10[] = {
    H(0x2136, 20, 10), 
    W(0x0003), W(0xf9a5), W(0x0318), W(0xff2b), W(0xff0e), W(0xf900), W(0xf018), W(0x009e), W(0xe199), W(0x04f4), W(0x4000), W(0xff14), W(0xf90f), W(0x0318), W(0xff2b), W(0xff0e), W(0xf900), W(0x7318), W(0x00e2), W(0xaec3), 

};

// patch_hardware_11, PSKEY_PATCH61 (0x2137, 8503), 9 words
static const bt_byte packet11[] = {
    H(0x2137, 9, 11), 
    W(0x0001), W(0xe8f2), W(0x0118), W(0xff2b), W(0xff0e), W(0xe900), W(0xf618), W(0x00e2), W(0x5830), 

};

// patch_hardware_13, PSKEY_PATCH63 (0x2139, 8505), 27 words
static const bt_byte packet12[] = {
    H(0x2139, 27, 12), 
    W(0x0001), W(0x8d02), W(0x0018), W(0xff2b), W(0xff0e), W(0xd600), W(0xcc18), W(0x009e), W(0x0118), W(0xff2b), W(0xff0e), W(0x7900), W(0x3118), W(0x009e), W(0xe199), W(0x09f4), W(0xe100), W(0xb219), W(0x0316), W(0xfe27), W(0x0216), W(0xff27), W(0xff0e), W(0xfe9f), W(0x0114), W(0xf80f), W(0xd06f), 

};

// patch_hardware_14, PSKEY_PATCH64 (0x213a, 8506), 37 words
static const bt_byte packet13[] = {
    H(0x213a, 37, 13), 
    W(0x0000), W(0xd5ae), W(0x0118), W(0xff2b), W(0xff0e), W(0x6a00), W(0xe418), W(0x009e), W(0xe199), W(0x15f4), W(0x0513), W(0x7700), W(0xb580), W(0x02f4), W(0x0534), W(0xe119), W(0x0016), W(0x0434), W(0xf825), W(0x0116), W(0x08a0), W(0xf835), W(0x021b), W(0x0126), W(0x0018), W(0xff2b), W(0xff0e), W(0xd600), W(0xbf18), W(0x00e2), W(0x0018), W(0xff2b), W(0xff0e), W(0xd600), W(0xbc18), W(0x00e2), W(0xc32a), 

};

// patch_hardware_15, PSKEY_PATCH65 (0x213b, 8507), 31 words
static const bt_byte packet14[] = {
    H(0x213b, 31, 14), 
    W(0x0001), W(0x8cae), W(0x0af0), W(0xe100), W(0xa315), W(0x0118), W(0xff2b), W(0xff0e), W(0x6900), W(0xa518), W(0x009e), W(0xf80f), W(0x049b), W(0x0bf0), W(0xe100), W(0xa114), W(0xe500), W(0xed10), W(0x0018), W(0xff2b), W(0xff0e), W(0xd600), W(0x8c18), W(0x009e), W(0x0118), W(0xff2b), W(0xff0e), W(0x8d00), W(0xcc18), W(0x00e2), W(0xdfa7), 

};

// patch_radiotest_tx_start, PSKEY_PATCH107 (0x21fb, 8699), 20 words
static const bt_byte packet15[] = {
    H(0x21fb, 20, 15), 
    W(0xf000), W(0x3215), W(0x0800), W(0x00b4), W(0xf000), W(0x3225), W(0xf000), W(0x3215), W(0xf800), W(0xffc4), W(0xf000), W(0x3225), W(0xf000), W(0x3215), W(0x0800), W(0x00b4), W(0xf000), W(0x3225), W(0x00e2), W(0x49e0), 

};

// patch_lc_init_radio, PSKEY_PATCH112 (0x2200, 8704), 7 words
static const bt_byte packet16[] = {
    H(0x2200, 7, 16), 
    W(0xf100), W(0xcf15), W(0x01b4), W(0xf100), W(0xcf25), W(0x00e2), W(0x9dd1), 

};

static const bt_byte* const packets[] = {
    packet1,
    packet2,
    packet3,
    packet4,
    packet5,
    packet6,
    packet7,
    packet8,
    packet9,
    packet10,
    packet11,
    packet12,
    packet13,
    packet14,
    packet15,
    packet16
};

#define PACKET_COUNT 16

#ifdef __cplusplus
}
#endif

#endif // __BTX_CSR_PATCH_SCRIPT_INCLUDED__

//-------------------------------------------------------------------
// END OF GENERATED FILE
//-------------------------------------------------------------------
