/*******************************************************************************
  OC Driver Functions for Static Single Instance Driver

  Company:
    Microchip Technology Inc.

  File Name:
    drv_oc_static.c

  Summary:
    OC driver implementation for the static single instance driver.

  Description:
    The OC device driver provides a simple interface to manage the OC
    modules on Microchip microcontrollers.
    
  Remarks:
    Static interfaces incorporate the driver instance number within the names
    of the routines, eliminating the need for an object ID or object handle.
    Static single-open interfaces also eliminate the need for the open handle.
*******************************************************************************/

//DOM-IGNORE-BEGIN
/*******************************************************************************
Copyright (c) 2013 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTOCULAR PURPOSE.
IN NO EVENT SHALL MOCROCHIP OR ITS LOCENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STROCT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVOCES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
*******************************************************************************/
//DOM-IGNORE-END

// *****************************************************************************
// *****************************************************************************
// Header Includes
// *****************************************************************************
// *****************************************************************************
#include "peripheral/oc/plib_oc.h"
<#if CONFIG_DRV_OC_INTERRUPT_MODE == true>
#include "peripheral/int/plib_int.h"
</#if>
<#macro DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE OC_INSTANCE OC_MODES OC_BUF_SIZE OC_TMRS OC_ALT_TMRS_SELECT OC_ALT_TMRS 
OC_COMP_VAL OC_PULSEW OC_INT_SRC OC_INT_VEC OC_INT_PRI OC_INT_SPRI>
<#if OC_ALT_TMRS_SELECT == true>
#include "peripheral/devcon/plib_devcon.h"
</#if>
// *****************************************************************************
// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} static driver functions
// *****************************************************************************
// *****************************************************************************
void DRV_OC${DRV_INSTANCE}_Initialize(void)
{
    /* Setup OC0 Instance */
    PLIB_OC_ModeSelect(${OC_INSTANCE}, ${OC_MODES});
    PLIB_OC_BufferSizeSelect(${OC_INSTANCE}, ${OC_BUF_SIZE});
<#if OC_ALT_TMRS_SELECT == true>
    PLIB_DEVCON_SystemUnlock (DEVCON_ID_0);
    PLIB_OC_AlternateClockEnable( ${OC_INSTANCE} );
    PLIB_DEVCON_SystemLock (DEVCON_ID_0);
    PLIB_OC_AlternateTimerSelect(${OC_INSTANCE}, ${OC_ALT_TMRS});
</#if>
<#if OC_ALT_TMRS_SELECT == false>
    PLIB_OC_TimerSelect(${OC_INSTANCE}, ${OC_TMRS});
</#if>
    PLIB_OC_Buffer16BitSet(${OC_INSTANCE}, ${OC_COMP_VAL});
    PLIB_OC_PulseWidth16BitSet(${OC_INSTANCE}, ${OC_PULSEW});
<#if CONFIG_DRV_OC_INTERRUPT_MODE == true>

    /* Setup Interrupt */
    PLIB_INT_SourceEnable(INT_ID_0, ${OC_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${OC_INT_VEC}, ${OC_INT_PRI});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${OC_INT_VEC}, ${OC_INT_SPRI});
</#if>
}

void DRV_OC${DRV_INSTANCE}_Enable(void)
{
   PLIB_OC_Enable(${OC_INSTANCE});
}

void DRV_OC${DRV_INSTANCE}_Disable(void)
{
   PLIB_OC_Disable(${OC_INSTANCE});
}

void DRV_OC${DRV_INSTANCE}_Start(void)
{
   PLIB_OC_Enable(${OC_INSTANCE});
}

void DRV_OC${DRV_INSTANCE}_Stop(void)
{
   PLIB_OC_Disable(${OC_INSTANCE});
}
<#if OC_MODES == "OC_SET_HIGH_SINGLE_PULSE_MODE" || OC_MODES == "OC_SET_LOW_SINGLE_PULSE_MODE" || OC_MODES == "OC_TOGGLE_CONTINUOUS_PULSE_MODE">

void DRV_OC${DRV_INSTANCE}_CompareValuesSingleSet(uint32_t compareValue)
{
<#if OC_BUF_SIZE == "OC_BUFFER_SIZE_16BIT">
    /* Updating compare value for 16 bit mode */
    PLIB_OC_Buffer16BitSet(${OC_INSTANCE}, (uint16_t)compareValue);
<#else>
    /* Updating compare value for 32 bit mode */
    PLIB_OC_Buffer32BitSet(${OC_INSTANCE}, compareValue);
</#if>
}
</#if>
<#if OC_MODES == "OC_DUAL_COMPARE_SINGLE_PULSE_MODE" || OC_MODES == "OC_DUAL_COMPARE_CONTINUOUS_PULSE_MODE">

void DRV_OC${DRV_INSTANCE}_CompareValuesDualSet(uint32_t priVal, uint32_t secVal)
{
<#if OC_BUF_SIZE == "OC_BUFFER_SIZE_16BIT">
    /* Updating primary compare value for 16 bit mode */
    PLIB_OC_Buffer16BitSet(${OC_INSTANCE}, (uint16_t)priVal);

    /* Updating secondary compare value for 16 bit mode */	
    PLIB_OC_PulseWidth16BitSet(${OC_INSTANCE}, (uint16_t)secVal);
<#else>
    /* Updating primary compare value for 32 bit mode */
    PLIB_OC_Buffer32BitSet(${OC_INSTANCE}, priVal);

    /* Updating secondary compare value for 32 bit mode */	
    PLIB_OC_PulseWidth32BitSet(${OC_INSTANCE}, secVal);
</#if>
}
</#if>
<#if OC_MODES == "OC_COMPARE_PWM_MODE_WITHOUT_FAULT_PROTECTION" || OC_MODES == "OC_COMPARE_PWM_MODE_WITH_FAULT_PROTECTION" || OC_MODES == "OC_COMPARE_PWM_EDGE_ALIGNED_MODE">

void DRV_OC${DRV_INSTANCE}_PulseWidthSet(uint32_t pulseWidth)
{
<#if OC_BUF_SIZE == "OC_BUFFER_SIZE_16BIT">
    /* Updating pulse width for 16 bit mode */
    PLIB_OC_PulseWidth16BitSet(${OC_INSTANCE}, (uint16_t)pulseWidth);
<#else>
    /* Updating pulse width for 32 bit mode */
    PLIB_OC_PulseWidth32BitSet(${OC_INSTANCE}, pulseWidth);
</#if>
}
</#if>

bool DRV_OC${DRV_INSTANCE}_FaultHasOccurred(void)
{
   return PLIB_OC_FaultHasOccurred(${OC_INSTANCE});
}

</#macro>

<#if CONFIG_DRV_OC_INST_IDX0 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="0" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX0 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX0 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX0
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX0 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX0
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX0
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX0 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX0
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX0 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX0 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX0 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX0/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX1 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="1" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX1 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX1 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX1
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX1 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX1
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX1
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX1 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX1
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX1 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX1 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX1 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX1/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX2 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="2" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX2 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX2 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX2
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX2 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX2
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX2
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX2 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX2
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX2 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX2 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX2 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX2/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX3 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="3" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX3 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX3 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX3
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX3 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX3
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX3
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX3 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX3
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX3 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX3 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX3 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX3/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX4 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="4" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX4 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX4 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX4
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX4 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX4
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX4
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX4 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX4
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX4 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX4 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX4 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX4/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX5 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="5" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX5 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX5 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX5
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX5 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX5
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX5
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX5 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX5
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX5 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX5 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX5 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX5/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX6 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="6" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX6 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX6 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX6
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX6 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX6
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX6
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX6 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX6
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX6 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX6 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX6 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX6/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX7 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="7" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX7 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX7 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX7
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX7 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX7
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX7
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX7 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX7
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX7 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX7 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX7 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX7/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX8 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="8" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX8 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX8 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX8
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX8 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX8
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX8
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX8 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX8
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX8 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX8 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX8 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX8/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX9 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="9" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX9 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX9 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX9
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX9 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX9
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX9
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX9 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX9
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX9 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX9 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX9 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX9/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX10 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="10" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX10 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX10 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX10
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX10 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX10
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX10
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX10 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX10
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX10 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX10 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX10 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX10/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX11 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="11" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX11 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX11 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX11
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX11 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX11
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX11
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX11 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX11
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX11 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX11 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX11 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX11/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX12 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="12" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX12 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX12 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX12
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX12 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX12
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX12
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX12 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX12
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX12 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX12 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX12 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX12/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX13 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="13" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX13 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX13 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX13
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX13 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX13
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX13
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX13 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX13
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX13 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX13 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX13 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX13/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX14 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="14" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX14 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX14 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX14
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX14 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX14
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX14
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX14 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX14
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX14 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX14 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX14 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX14/>
</#if>
<#if CONFIG_DRV_OC_INST_IDX15 == true>
<@DRV_OC_STATIC_FUNCTIONS DRV_INSTANCE="15" OC_INSTANCE=CONFIG_DRV_OC_PERIPHERAL_ID_IDX15 
OC_MODES=CONFIG_DRV_OC_COMPARE_MODES_IDX15 OC_BUF_SIZE=CONFIG_DRV_OC_BUFFER_SIZE_IDX15
OC_TMRS=CONFIG_DRV_OC_16BIT_TIMERS_IDX15 OC_ALT_TMRS_SELECT=CONFIG_DRV_OC_ALTERNATE_TIMERS_SELECTION_IDX15
OC_ALT_TMRS=CONFIG_DRV_OC_ALTERNATE_TIMERS_IDX15
OC_COMP_VAL=CONFIG_DRV_OC_NONPWM_16BIT_PRI_COMPARE_IDX15 OC_PULSEW= CONFIG_DRV_OC_16BIT_PULSE_WIDTH_IDX15
OC_INT_SRC=CONFIG_DRV_OC_INTERRUPT_SOURCE_IDX15 OC_INT_VEC=CONFIG_DRV_OC_INTERRUPT_VECTOR_IDX15 
OC_INT_PRI=CONFIG_DRV_OC_INT_PRIORITY_IDX15 OC_INT_SPRI=CONFIG_DRV_OC_INT_SUB_PRIORITY_IDX15/>
</#if>
/*******************************************************************************
 End of File
*/
